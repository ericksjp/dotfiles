-- return {
-- 	{
-- 		"williamboman/mason.nvim", --gerenciador de lsps
-- 		lazy = false,
-- 		config = function()
-- 			require("mason").setup()
-- 		end,
-- 	},
-- 	{
-- 		"williamboman/mason-lspconfig.nvim", --plugin para configurar os lsps localmente
-- 		lazy = false,
--
-- 		config = function()
-- 			require("mason-lspconfig").setup({
-- 				ensure_installed = {
-- 					"tailwindcss",
-- 					"tsserver",
-- 					"cssls",
-- 					"jdtls",
-- 				},
-- 			})
-- 		end,
-- 	},
-- 	{
-- 		"neovim/nvim-lspconfig", --plugin para comunicação entre o nvim e os lsps
-- 		lazy = false,
-- 		config = function()
-- 			local lspconfig = require("lspconfig")
-- 			lspconfig.lua_ls.setup({})
-- 			lspconfig.tsserver.setup({})
-- 			lspconfig.cssls.setup({})
-- 			lspconfig.jdtls.setup({})
-- 			lspconfig.tailwindcss.setup({})
--
-- 			-- Global mappings.
-- 			-- See `:help vim.diagnostic.*` for documentation on any of the below functions
-- 			-- vim.keymap.set("n", "<leader>e", vim.diagnostic.open_float)
-- 			-- vim.keymap.set("n", "[d", vim.diagnostic.goto_prev)
-- 			-- vim.keymap.set("n", "]d", vim.diagnostic.goto_next)
-- 			-- vim.keymap.set("n", "<leader>q", vim.diagnostic.setloclist)
-- 			--
--
-- 			vim.api.nvim_create_autocmd("LspAttach", {
-- 				group = vim.api.nvim_create_augroup("UserLspConfig", {}),
-- 				callback = function(ev)
-- 					-- Enable completion triggered by <c-x><c-o>
-- 					vim.bo[ev.buf].omnifunc = "v:lua.vim.lsp.omnifunc"
--
-- 					local opts = { buffer = ev.buf }
-- 					-- See `:help vim.lsp.*` for documentation on any of the below functions
-- 					vim.keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
-- 					vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
-- 					vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
-- 					vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
-- 					vim.keymap.set("n", "<C-k>", vim.lsp.buf.signature_help, opts)
-- 					vim.keymap.set("n", "<leader>wa", vim.lsp.buf.add_workspace_folder, opts)
-- 					vim.keymap.set("n", "<leader>wr", vim.lsp.buf.remove_workspace_folder, opts)
-- 					vim.keymap.set("n", "<leader>wl", function()
-- 						print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
-- 					end, opts)
-- 					vim.keymap.set("n", "<leader>D", vim.lsp.buf.type_definition, opts)
-- 					vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
-- 					vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts)
-- 					vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
-- 					vim.keymap.set("n", "<leader>f", function()
-- 						vim.lsp.buf.format({ async = true })
--
-- 						local wk = require("which-key")
-- 						wk.register({
-- 							gD = { "Goto Declaration" },
-- 							gd = { "Goto Definition" },
-- 							K = { "Show Hover" },
-- 							gi = { "Goto Implementation" },
-- 							["<C-k>"] = { "Show Signature Help" },
-- 							["<leader>wa"] = { "Add Workspace Folder" },
-- 							["<leader>wr"] = { "Remove Workspace Folder" },
-- 							["<leader>wl"] = { "List Workspace Folders" },
-- 							["<leader>D"] = { "Goto Type Definition" },
-- 							["<leader>rn"] = { "Rename" },
-- 							["<leader>ca"] = { "Code Action" },
-- 							gr = { "Goto References" },
-- 							["<leader>f"] = { "Format" },
-- 						}, opts)
-- 					end, opts)
-- 				end,
-- 			})
-- 		end,
-- 	},
-- 	{
-- 		"nvim-cmp",
-- 		dependencies = { "hrsh7th/cmp-emoji" },
-- 		opts = function(_, opts)
-- 			table.insert(opts.sources, { name = "emoji" })
-- 		end,
-- 	},
-- }
